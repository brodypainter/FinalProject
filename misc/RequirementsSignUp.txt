These are the requirements, I went through them and commented what we have already done, what we have left, who is
working on each part currently, and any recommendations/ideas I had off the top of my head on how to implement them. 
Its by no means 100% complete or final but this will give us a good idea of what we should be focusing on now

Requirements 

Maps 

â€¢	Each map has a background image and contains a pre-defined path for enemies such that enemies originate at their start location and move along this path towards the playerâ€™s destination.
â€¢	Different maps have different backgrounds and paths that enemies travel.
â€¢	A player can select at least one map that contains more than one path for
enemies to travel on (so it presents a more difficult gameplay).
â€¢	A player can select and play on at least three maps.  The path the enemies travel must be different â€“ you cannot just change a background image and call it a new map). These 3 maps should be built-in and selectable at game startup.

TODO: Max is making the 3 concrete maps based on the Map abstract class, and using the MapFactory class to create standardized Map1, Map2, Map3 As well as making Level1, Level2, Level3 (feel free to add easy/hard mode versions if you have time/desire) based on Level abstract class. As far as making a map with 2 or more paths use the 2D paths list I made.
Desone work on making the GUI show a screen that will let player select which level # they want after clicking single player instead of always redirecting to Level0.

Enemies
â€¢	Enemies continuously emerge from the map at some location.
â€¢	Enemies move towards the destination that the player will defend.
â€¢	Movement of enemies is animated.
â€¢	Each enemy has certain stats/characteristics. This can include speed,
defense, armor, resistance to certain types of attacks (from different types of towers), etc. You can choose whether you want enemies to attack the towers. You can choose whether this difference applies to either each individual enemy that is spawned on the map or whether it applies to
each type of enemy.
â€¢	A player can view information about a enemy by clicking one that has been placed. Information should include the characteristics of that enemy (speed, defense, armor, ... your choice).
â€¢	The game should have at least three different types of enemies.

TODO: Peter fix enemy model progress and movement, Desone make sure enemy repainting is working. Max design 3+ concrete enemies based on Enemy abstract class with all the differences in characteristics, etc.. Desone find a way to have GUI click on a tile and tell client to call a comand asking for info about enemys at a Point coordinate location (maybe click pokedex button drag and drop cursor) and also add a pane to display the info and add HP bars

Towers
â€¢	Towers will attack enemies that pass by (in its range of attack). Some examples of this in existing tower defense games are: Gemcraft uses towers powered by gems and the combination of gems determine damage, range, etc. Kingdom Rush uses a medieval setting with archery towers and warrior towers. Be creative! You can decide how towers should attack enemies. For example whether they should attack one enemy until it moves out of the tower's range or whether it attacks enemies at the edge of its range before attacking enemies close to it â€¦ whatever makes sense for the game.

â€¢	Each tower has a different damage amount, range of attack, and rate of attack. 
^Max
â€¢	Each tower has a different way of attacking enemies. Possibilities include
o	attack multiple enemies, 
o	teleport enemies, 
o	slow enemies, 
o	poison  enemies, 
o	confusing enemies so that they either walk back towards their start or maybe they spin in a circle for a few seconds, etc.
^Max + help from Peter
â€¢	A player can view information about a tower before purchasing it and/or
by clicking one that has been placed.
^Max make a toString/getInfo() for towers, Desone let GUI ask for it/display it
â€¢	Towers must be upgradeable to have more range, fire rate, or damage.
^Max
â€¢	Tower upgrades change the look of the tower.
^Max (just give Tower the arraylist of all possible Image String URLs and set the main String URL as whichever is appropriate like we talked about)
â€¢	A tower's range is visible when a tower is clicked. If a tower is upgraded,
this information should also be updated.
^Max make a getRange() method for tower, Desone make GUI ask for/display this info (draw a slightly transparent oval centered on tower point center with horizontal width of tileWidth*range and vertical height or tileHeight*range)
â€¢	Tower attacks are animated.
^Desone
â€¢	Towers cannot be built such that they block the path of the enemies.
^Already done
â€¢	The player can build at least three different towers. These three towers must be inherently different. You cannot just change the initial damage and range of a tower, for example, for a tower to qualify as different. A different tower might involve a different type of attack or a different animation. (e.g. a lightning tower that attacks 3 enemies at the same time)
^Max

Single-player Gameplay
â€¢	Players can buy towers through some form of currency (money, points,
mana power, life-force, etc.). There is a graphical way for the player to place the tower at the desired location (e.g. change the cursor to look like the tower and use a mouse click, select a grid square, etc.)
^Done
â€¢	Players should start with an appropriate amount and are able to obtain
this currency during game-play by defeating enemies.
^Done, Max just play with the starting amount/reward per kill to make game fair for each level
â€¢	Players can see their current amount of currency throughout the game.
^Model wise it is updated, Desone make sure it is being displayed and not repainted over as it seems like it is currently. 
â€¢	The player loses the game after a certain number of enemies breach the
defenses and reach the destination. Again, you can exercise your creativity here. One way (out of many) is to have the "destination" as the headquarters for the player, that also has health. Enemies can be designed to do some amount of damage to the headquarters.
^Done
â€¢	The player can win the game by fulfilling some objective (successfully defeating some number of enemies, defeating a boss enemy, defending the destination for a certain amount of time, etc.).
^Done, surviving all waves and killing all enemies while hp > 0

Multi-player Co-op (over the Network)  
TODO: Brody will do most of this part
Ideas: We can create special Level classes that contain arraylists of Players and spawn different enemy waves (and/or at different times) on Player1 or player 2, give the Player class an instance variable to hold on to its Partner Player (set by Server or Level) and have them call methods on each other for the shared money/health needs. Desone will make the GUI display a chat log and a minimap tabs/panes for the multi player game view.

â€¢	Players must have the option of playing a game with another human player over the network. (2-player only, no need to program for an arbitrary number of players)
â€¢	Both players' maps have the same path for enemies.
â€¢	Both players will start with the same amount of currency and the same amount of health.
â€¢	Gameplay follows single-player game with a couple of notable differences:
o	Both players share the same health. In other words, when an enemy reaches the destination on one playerâ€™s map, the health is deducted for both players.
o	Players may send any (positive) amount of currency to the other player
o	Players may communicate over a chat system that is displayed in the GUI.
o	Waves may not be exactly the same for both players
â€¢	Each player will see a mini-map of the other playerâ€™s field that also displays some helpful information about them. The mini-map should include at least the towers that the other player has created and where the enemies are located. You could also include statistics such as the number of units the opponent has defeated, the number of units the opponent sends, etc. near the mini-map. Choose what is appropriate and consult with the project manager with any questions or concerns.
â€¢	The win conditions should be implemented the same as the single player mode.

General Game Characteristics & Rules 
â€¢	The player can read the rules of the game anytime before game-play.
^Desone add this to main menu
â€¢	A player chooses between single and multi-player game modes in a main menu. The player returns to this menu after a game ends.
^Desone (already kind of there, but not perfect)
â€¢	A win/lose message should be shown when a game ends. This requirement can be replaced with a game statistics message 
^Done
â€¢	You may invent a version of gameplay or use one of the two popular versions of game-play:
o	Continuous: Enemies continuously spawn and the player builds towers to defend the destination. The game ends when the destination has been defended for a specified time period or when a certain number of enemies have been defeated.
o	Waves: A collection of enemies form one wave. Each wave of enemies spawns with a short pause in between waves. The game ends when all waves have been defeated.
^Done
â€¢	The player can pause and resume the game in single-player mode. This feature is not required for multi-player mode.
^Not finished, Peter will do this. Desone add a pause button to call client, I will take care of it from there
â€¢	The player can toggle the speed of the game between a normal speed and a fast speed. This feature is not required for multi-player mode.
^Peter will do this, again Desone add a speed up/normal toggle button to call client
â€¢	Save/Load Games: When playing single-player mode, the player can choose to save the game and play at a later time. A Load Game option is in the main menu. This feature works well with the Pause Game feature, since it is more elegant to load a game, have it paused initially, and then resume to play the game.
^Will be harder to do off the top of my head, Peter will try to do this modelwise. Desone add a save and load buttons options to GUI to call client, will take it from there

Wow Factor

Completing the above requirements will earn at most 90% of your grade. To earn the last 10%, your game needs to have a â€œwowâ€� factor. This could include lots of extra features, how well designed (and fun) the game is, or just good old-fashioned polishâ€”anything that will make your game really stand out!
